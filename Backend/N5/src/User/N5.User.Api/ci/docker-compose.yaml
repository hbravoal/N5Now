version: "3"

services:

  mongo:
    image: 'mongo'
    ports:
      - '27017:27017'
    volumes:
      - 'mongo:/data/db'

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - kafka
      #- schemaregistry
      #- kafka-connect
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      #KAFKA_CLUSTERS_0_JMXPORT: 9997
      #KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schemaregistry:8085
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      #KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083

  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    image: bitnami/kafka:3.3.1-debian-11-r1
    hostname: kafka1    
    container_name: kafka1
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      BITNAMI_DEBUG: "false"
      KAFKA_CFG_LISTENERS : PLAINTEXT://:9094,CONTROLLER://:9093,EXTERNAL://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS : PLAINTEXT://kafka:9094,EXTERNAL://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP : CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND : "true"
      #KAFKA_CFG_AUTHORIZER_CLASS_NAME :
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE : "true"
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR : 1
      KAFKA_CFG_DELETE_TOPIC_ENABLE : "false"
      KAFKA_CFG_LOG_DIRS : /bitnami/kafka/data
      KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES : 10000
      KAFKA_CFG_LOG_FLUSH_INTERVAL_MS : 1000
      KAFKA_CFG_LOG_RETENTION_BYTES : 1073741824
      KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS : 300000
      KAFKA_CFG_LOG_RETENTION_HOURS : 168
      KAFKA_CFG_LOG_SEGMENT_BYTES : 1073741824
      KAFKA_CFG_MESSAGE_MAX_BYTES : 10485880
      KAFKA_CFG_REPLICA_FETCH_MAX_BYTES: 10485880
      KAFKA_CFG_NUM_IO_THREADS : 8
      KAFKA_CFG_NUM_NETWORK_THREADS : 3
      KAFKA_CFG_NUM_PARTITIONS : 1
      KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR : 1
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR : 1
      KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES : 102400
      KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES : 104857600
      KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES : 102400
      KAFKA_CFG_SUPER_USERS : User:admin
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR : 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR : 1
      KAFKA_CFG_ZOOKEEPER_CONNECT : zookeeper:2181
      KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS : 6000
      KAFKA_HEAP_OPTS : -Xmx1024m -Xms1024m
      #KAFKA_INTER_BROKER_LISTENER_NAME : INTERNAL
      KAFKA_LOG_DIR : /opt/bitnami/kafka/logs
      KAFKA_VOLUME_DIR : /bitnami/kafka
      KAFKA_ZOOKEEPER_PROTOCOL : PLAINTEXT

  # schemaregistry:
  #   image: confluentinc/cp-schema-registry:5.5.0
  #   ports:
  #     - 8085:8085
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
  #     SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
  #     SCHEMA_REGISTRY_HOST_NAME: schemaregistry
  #     SCHEMA_REGISTRY_LISTENERS: http://schemaregistry:8085
  #     SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
  #     SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
  #     SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas

  # kafka-connect:
  #   image: confluentinc/cp-kafka-connect:6.0.1
  #   ports:
  #     - 8083:8083
  #   depends_on:
  #     - kafka
  #     - schemaregistry
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: kafka:29092
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: _connect_configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_STORAGE_TOPIC: _connect_offset
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: _connect_status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schemaregistry:8085
  #     CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schemaregistry:8085
  #     CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"

  # kafka-init-topics:
  #   image: confluentinc/cp-kafka:5.3.1
  #   volumes:
  #      - ./message.json:/data/message.json
  #   depends_on:
  #     - kafka
  #   command: "bash -c 'echo Waiting for Kafka to be ready... && \
  #              cub kafka-ready -b kafka:29092 1 30 && \
  #              kafka-topics --create --topic second.users --partitions 3 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
  #              kafka-topics --create --topic second.messages --partitions 2 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
  #              kafka-topics --create --topic first.messages --partitions 2 --replication-factor 1 --if-not-exists --zookeeper zookeeper:2181 && \
  #              kafka-console-producer --broker-list kafka:29092 -topic second.users < /data/message.json'"
volumes:
  mongo: